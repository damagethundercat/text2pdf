# Task ID: 12
# Title: Extend Text Extraction Pipeline with Multi-Model Support (Gemini 2.5 Flash and Gemma 3:12B via Ollama)
# Status: pending
# Dependencies: 8, 7
# Priority: medium
# Description: Add CLI --model option to select between Gemini 2.5 Flash and Gemma 3:12B (Ollama) for text extraction, with extensible architecture for future local LLM integration.
# Details:
Implement multi-model text extraction architecture with the following components: 1) Extend argparse in CLI to add --model parameter with choices ['gemini', 'ollama-gemma'] and default to 'gemini', 2) Refactor extract_text_from_image() function to use model-specific handlers through a factory pattern or strategy pattern, 3) Create OllamaClient class for Ollama API integration with proper error handling and connection management, 4) Implement model-specific prompt templates and post-processing logic in separate modules (prompts/gemini_prompts.py, prompts/ollama_prompts.py), 5) Add model configuration management for API endpoints, model names, and parameters, 6) Design extensible ModelHandler interface to easily add future local LLMs (Llama, Mistral, etc.), 7) Update cost tracking to handle different pricing models (Gemini API costs vs local Ollama processing), 8) Add model validation and health checks during initialization. Architecture should support: model-specific retry logic, different response parsing strategies, configurable timeout and batch size per model, and seamless fallback mechanisms. Include comprehensive error handling for Ollama connection failures and model loading issues.

# Test Strategy:
Test CLI --model parameter validation and default behavior. Verify Gemini model continues to work unchanged. Test Ollama integration with mock Ollama server and real Gemma 3:12B model. Validate model-specific prompt templates produce expected outputs. Test error handling for Ollama connection failures and invalid model selections. Verify cost tracking accuracy for both models. Test model switching mid-pipeline recovery from checkpoints. Validate extensibility by implementing a mock third model handler. Test performance comparison between models on same image set.
